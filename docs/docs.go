// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2019-12-19 23:41:12.56985048 +0800 CST m=+0.056256094

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/article": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "article"
                ],
                "summary": "Get list of articles.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.GetArticles"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "\u003c/p\u003e[author_id] : Author id (min:1)\u003c/p\u003e[title] : The article title \u003c/p\u003e[desc] : Description of article \u003c/p\u003e[content] : Content of article \u003c/p\u003e[imageUrl] : Url of image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "article"
                ],
                "summary": "Add new article",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/example.PostArticle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    }
                }
            }
        },
        "/article/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "article"
                ],
                "summary": "Get article info by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.GetArticle"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.ArticleNotExist"
                        }
                    }
                }
            },
            "put": {
                "description": "\u003c/p\u003e[author_id] : Author id (min:1)\u003c/p\u003e[title] : The article title \u003c/p\u003e[desc] : Description of article \u003c/p\u003e[content] : Content of article \u003c/p\u003e[imageUrl] : Url of image",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "article"
                ],
                "summary": "Modify article info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/example.PostArticle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.ArticleNotExist"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "article"
                ],
                "summary": "Delete article info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Article ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.ArticleNotExist"
                        }
                    }
                }
            }
        },
        "/author": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "author"
                ],
                "summary": "Get list of authors.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.GetAuthors"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "\u003c/p\u003e[name] : Author name (max:100) \u003c/p\u003e[born] : The born year of the author (min:1000, max:2500)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "author"
                ],
                "summary": "Add new author",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/example.PostAuthor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    }
                }
            }
        },
        "/author/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "author"
                ],
                "summary": "Get author info by ID.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/example.GetAuthor"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.InvalidID"
                        }
                    }
                }
            },
            "put": {
                "description": "\u003c/p\u003e[name] : Author name (max:100) \u003c/p\u003e[born] : The born year of the author (min:1000, max:2500)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "author"
                ],
                "summary": "Modify author info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/example.PostAuthor"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.AuthorNotExist"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "author"
                ],
                "summary": "Delete author info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Author ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.AuthorNotExist"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "\u003c/p\u003e[account] : (min: 6, max:12)\u003c/p\u003e[password] : (min: 6, max:12)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Login and get new JWT token",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/example.PostLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.ErrorPasswdWrong"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "\u003c/p\u003e[account] : (min: 6, max:12) \u003c/p\u003e[name] : (max:12) \u003c/p\u003e[password] : (min: 6, max:12)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": " ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/example.PostRegister"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.OK"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.ErrorExistUser"
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "description": "\u003c/p\u003e[image] : Accept format (.jpg,.jpeg,.png) Max Size : 5MB",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Upload image",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Your image file.",
                        "name": "image",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/example.UploadImage"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/example.ErrorImageFormat"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "example.ArticleInfo": {
            "type": "object",
            "properties": {
                "author": {
                    "type": "object",
                    "$ref": "#/definitions/example.AuthorInfo"
                },
                "author_id": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "Although classified as a comedy...."
                },
                "created_on": {
                    "type": "integer",
                    "example": 1574952062
                },
                "deleted_on": {
                    "type": "integer",
                    "example": 0
                },
                "desc": {
                    "type": "string",
                    "example": "The Merchant of Venice is a 16th-century play written by William Shakespeare"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "type": "string",
                    "example": "http://xxx.xxx.xxx.jpeg"
                },
                "modified_on": {
                    "type": "integer",
                    "example": 1575189888
                },
                "title": {
                    "type": "string",
                    "example": "The Merchant Venice "
                }
            }
        },
        "example.ArticleNotExist": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 10003
                },
                "error_message": {
                    "type": "string",
                    "example": "Article not exist"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "example.AuthorInfo": {
            "type": "object",
            "properties": {
                "born": {
                    "type": "integer",
                    "example": 1564
                },
                "created_on": {
                    "type": "integer",
                    "example": 1574952062
                },
                "deleted_on": {
                    "type": "integer",
                    "example": 0
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "modified_on": {
                    "type": "integer",
                    "example": 1575189888
                },
                "name": {
                    "type": "string",
                    "example": "William Shakespeare"
                }
            }
        },
        "example.AuthorNotExist": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 10002
                },
                "error_message": {
                    "type": "string",
                    "example": "Author not exist"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "example.ErrorExistUser": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 10005
                },
                "error_message": {
                    "type": "string",
                    "example": "User account already exist"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "example.ErrorImageFormat": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 10011
                },
                "error_message": {
                    "type": "string",
                    "example": "Image format not correct"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "example.ErrorPasswdWrong": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 10006
                },
                "error_message": {
                    "type": "string",
                    "example": "Wrong password"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "example.GetArticle": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 200
                },
                "error_message": {
                    "type": "string",
                    "example": "OK"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/example.ArticleInfo"
                }
            }
        },
        "example.GetArticles": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 200
                },
                "error_message": {
                    "type": "string",
                    "example": "OK"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.ArticleInfo"
                    }
                }
            }
        },
        "example.GetAuthor": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 200
                },
                "error_message": {
                    "type": "string",
                    "example": "OK"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/example.AuthorInfo"
                }
            }
        },
        "example.GetAuthors": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 200
                },
                "error_message": {
                    "type": "string",
                    "example": "OK"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/example.AuthorInfo"
                    }
                }
            }
        },
        "example.InvalidID": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 10001
                },
                "error_message": {
                    "type": "string",
                    "example": "Invalid ID"
                },
                "result": {
                    "type": "string"
                }
            }
        },
        "example.OK": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 200
                },
                "error_message": {
                    "type": "string",
                    "example": "OK"
                },
                "result": {
                    "type": "string",
                    "example": "OK"
                }
            }
        },
        "example.PostArticle": {
            "type": "object",
            "properties": {
                "author_id": {
                    "type": "integer",
                    "example": 1
                },
                "content": {
                    "type": "string",
                    "example": "Although classified as a comedy...."
                },
                "desc": {
                    "type": "string",
                    "example": "The Merchant of Venice is a 16th-century play written by William Shakespeare"
                },
                "image_url": {
                    "type": "string",
                    "example": "http://xxx.xxx.xxx.jpeg"
                },
                "title": {
                    "type": "string",
                    "example": "The Merchant Venice "
                }
            }
        },
        "example.PostAuthor": {
            "type": "object",
            "properties": {
                "born": {
                    "type": "integer",
                    "example": 1847
                },
                "name": {
                    "type": "string",
                    "example": "Thomas Alva Edison"
                }
            }
        },
        "example.PostLogin": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "example": "edison1234"
                },
                "password": {
                    "type": "string",
                    "example": "test1234"
                }
            }
        },
        "example.PostRegister": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "example": "edison1234"
                },
                "name": {
                    "type": "string",
                    "example": "edison"
                },
                "password": {
                    "type": "string",
                    "example": "test1234"
                }
            }
        },
        "example.UploadImage": {
            "type": "object",
            "properties": {
                "error_code": {
                    "type": "integer",
                    "example": 200
                },
                "error_message": {
                    "type": "string",
                    "example": "OK"
                },
                "result": {
                    "type": "object",
                    "$ref": "#/definitions/example.UploadImageInfo"
                }
            }
        },
        "example.UploadImageInfo": {
            "type": "object",
            "properties": {
                "encode_file_name": {
                    "type": "string",
                    "example": "fd456406745d816a45cae554c788e754.jpeg"
                },
                "image_url": {
                    "type": "string",
                    "example": "http://127.0.0.1:8000/images/fd456406745d816a45cae554c788e754.jpeg"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{"http", "https"},
	Title:       "Golang Restful API",
	Description: "This is a simple API for personal blog.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
